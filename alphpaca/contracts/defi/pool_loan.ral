// Developer can create pool loans for tokens

Contract Pool (
    owner: Address,
    token: ByteVec,                     // Token Not Wanted
    mut tokenAmount: U256,              // TokenAmount
    wtoken: ByteVec,                    // WToken wanted
    mut wtokenAmount: U256,             // Amount of WToken
    mut interest: U256                  // Base Interest Rate 3.5% but mutable as economic situations get better
    mut liquidated: U256                // Number of Liquidation Token .ie. Profit 
) {
    // Events


    // Enums


    pub fn getOwner() -> Address {
        return owner
    }

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn loantoken() -> () { // Dapp to User (Much Higher Collateral Required) USDT / ALPH + AYIN / ALPH
        let loanee = callerAddress!()

        let (encodeImmutableFields, encodeMutableFields) = Token.encodeFields!(symbol, name, decimals, tokenTotal, minter)

        let newloan = createSubContract!
    }

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn loantokenpaca() -> () { // Dapp to User (Much Higher Collateral Required) USDT / ALPH + AYIN / ALPH
        let loanee = callerAddress!()

        let (encodeImmutableFields, encodeMutableFields) = Token.encodeFields!(symbol, name, decimals, tokenTotal, minter)

        let newloan = createSubContract!
    }

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn addwtoken(amount: U256) -> () { // Dapp to User (Much Higher Collateral Required) USDT / ALPH + AYIN / ALPH
        
    }

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn removewtoken() -> () { // Dapp to User (Much Higher Collateral Required) USDT / ALPH + AYIN / ALPH
        
    }
}