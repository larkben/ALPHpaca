// Swap Child Contract

Contract Swap (
    token: ByteVec,                                     // token wanting to trade
    amount: Amount,                                     // amount
    mut tradetoken: ByteVec,                            // token you want
    mut tamount: U256,                                  // amount of that token
    owner: Address
) {
    // Events
    event Success(id: ByteVec, tone: ByteVec, aone: U256, ttwo: ByteVec, atwo: U256)
    event Cancel(id: ByteVec)
    event Edit(id: ByteVec, ttwo: ByteVec, atwo: U256) // Can only edit the token / amount requested
    // Error Codes

    enum Error {
        InvalidCaller = 1
    }

    // Public Functions
    pub fn getToken() -> ByteVec {
        return token
    }

    pub fn getAmount() -> U256 {
        return amount
    }

    pub fn getTradeToken() -> ByteVec {
        return tradetoken
    }

    pub fn editTradeToken(tnew: ByteVec) {
        tradetoken = tnew
    }

    pub fn getTAmount() -> U256 {
        return tamount
    }

    pub fn editTAmount(anew: U256) {
        tamount = anew
    }

    pub fn getOwner() -> Address {
        reurn owner
    }

    // Contract Functions
    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn confirmswap() -> ByteVec {
        
        caller = callerAddress!()

        // Transfer Caller Assets  -> Owner
        transferToken!(caller, getOwner(), getTradeToken(), getTAmount()) // Caller Sends Assets to Owner
        // Transfer Owner Assets -> Caller
        transferToken!(selfAddress!(), caller, getToken(), getAmount()) // Contract send Owners assets to Caller

        // Contract is finalized
        destroySelf!(owner)

        // Call an emit
        emit Success(selfContractId!(), getToken(), getAmount(), getTradeToken(), getTAmount())
    }

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn cancelswap() -> ByteVec {

        // Call Destroy
        destroySelf!(owner)

        emit Cancel(selfContractId!())
        
    }

    @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn editoffer(ttoken: ByteVec, amt: U256) -> ByteVec {
        
        caller = callerAddress!()

        assert!(caller == getOwner(), Error.InvalidCaller)

        editTradeToken(ttoken)

        editTAmount(amt)

        emit Edit(selfContractId!(), getTradeToken(), getTAmount())
    }
}