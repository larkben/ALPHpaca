// The parent contract for the token swaps and offers

Contract Tokenswap (
    contract: ByteVec,
    owner: Address,
    mut pacafee: U256,
    mut alphfee: U256,
    feeToken: ByteVec
) {

    // Events
    event SwapCreated(creator: Address, tokenOffered: ByteVec, tokenWanted: ByteVec, swap: ByteVec)
    event Destroy(caller: Address)
    event PacaFeeChange(pacafee: U256)
    event AlphFeeChange(alphfee: U256)

    // Error Codes
    enum ErrorCodes {
        InvalidCaller = 1
    }
    
    pub fn getPacaToken() -> ByteVec {
        return feeToken
    }

    pub fn getPacaFee() -> U256 {
        return pacafee
    }

    pub fn getAlphFee() -> U256 {
        return alphfee
    }

    pub fn getSymbol() -> ByteVec {
        //! This is typically the symbol / name of contract
        return feeToken
    }

    pub fn getName() -> ByteVec {
        //! This is typically the symbol / name of contract
        return feeToken
    }

    @using(preapprovedAssets = true, assetsInContract = false, updateFields = false, checkExternalCaller = false)
    pub fn createswappaca(tokenOffered: ByteVec, tokenOfferedAmt: U256, tokenWanted: ByteVec, tokenWantedAmt: U256) -> () {
        
        let minter = callerAddress!()

        let (encodeImmutableFields, encodeMutableFields) = Swapoffer.encodeFields!(minter, tokenOffered, tokenWanted, tokenOfferedAmt, tokenWantedAmt)

        let contractID = copyCreateContract!{minter -> ALPH: 1 alph, tokenOffered: tokenOfferedAmt}(
            contract,                                                                                  
            encodeImmutableFields,
            encodeMutableFields
        )

        transferToken!(minter, owner, getPacaToken(), getPacaFee())

        emit SwapCreated(minter, tokenOffered, tokenWanted, contractID)
    }

    @using(preapprovedAssets = true, assetsInContract = false, updateFields = false, checkExternalCaller = false)
    pub fn createswapalph(tokenOffered: ByteVec, tokenOfferedAmt: U256, tokenWanted: ByteVec, tokenWantedAmt: U256) -> () {
        
        let minter = callerAddress!()

        let (encodeImmutableFields, encodeMutableFields) = Swapoffer.encodeFields!(minter, tokenOffered, tokenWanted, tokenOfferedAmt, tokenWantedAmt)

        let contractID = copyCreateContract!{minter -> ALPH: 1 alph, tokenOffered: tokenOfferedAmt}(
            contract,                                                                                  
            encodeImmutableFields,
            encodeMutableFields
        )

        transferToken!(minter, owner, ALPH, getAlphFee())

        emit SwapCreated(minter, tokenOffered, tokenWanted, contractID)
    }

    @using(preapprovedAssets = true, assetsInContract = false, updateFields = true, checkExternalCaller = false)
    pub fn feepaca(amount: U256) -> () {

        pacafee = amount

        emit PacaFeeChange(pacafee)
    }

    @using(preapprovedAssets = true, assetsInContract = false, updateFields = true, checkExternalCaller = false)
    pub fn feealph(amount: U256) -> () {
        
        alphfee = amount

        emit AlphFeeChange(alphfee)
    }

    @using(assetsInContract = true, updateFields = false, checkExternalCaller = true)
    pub fn destroytokenswap() -> () {

        let caller = callerAddress!()

        checkCaller!(owner == caller, ErrorCodes.InvalidCaller)

        destroySelf!(owner)

        emit Destroy(owner)
    }

}